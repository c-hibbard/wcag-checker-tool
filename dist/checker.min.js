// dist/checker.min.js
(function () {
  function getContrast(fg, bg) {
    function luminance(r, g, b) {
      let a = [r, g, b].map(function (v) {
        v /= 255;
        return v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);
      });
      return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;
    }
    const f = luminance(fg[0], fg[1], fg[2]);
    const b = luminance(bg[0], bg[1], bg[2]);
    return (Math.max(f, b) + 0.05) / (Math.min(f, b) + 0.05);
  }

  function parseRGB(str) {
    const m = str.match(/rgba?\((\d+),\s*(\d+),\s*(\d+)/);
    return m ? [parseInt(m[1]), parseInt(m[2]), parseInt(m[3])] : [0, 0, 0];
  }

  function run() {
    const issues = [];

    // 1) Images missing alt
    document.querySelectorAll("img:not([alt])").forEach((el) => {
      issues.push({
        type: "Missing alt",
        node: el,
        msg: "<img> missing alt attribute",
      });
    });

    // 2) Inputs without labels
    document.querySelectorAll("input, textarea, select").forEach((el) => {
      const id = el.id;
      const hasLabel =
        (id && document.querySelector(`label[for="${id}"]`)) ||
        el.closest("label");
      if (!hasLabel) {
        issues.push({
          type: "Missing label",
          node: el,
          msg: `${el.tagName.toLowerCase()} has no associated label`,
        });
      }
    });

    // 3) Low contrast text
    document.querySelectorAll("body *").forEach((el) => {
      const cs = getComputedStyle(el);
      if (!cs.color || !cs.backgroundColor) return;
      const fg = parseRGB(cs.color);
      const bg = parseRGB(cs.backgroundColor);
      const ratio = getContrast(fg, bg);
      if (ratio < 4.5 && el.innerText.trim().length > 0) {
        issues.push({
          type: "Low contrast",
          node: el,
          msg: `Contrast ratio ${ratio.toFixed(2)} < 4.5`,
        });
      }
    });

    // Render report overlay
    let overlay = document.getElementById("wcag-checker-overlay");
    if (overlay) overlay.remove();
    overlay = document.createElement("div");
    overlay.id = "wcag-checker-overlay";
    overlay.style.position = "fixed";
    overlay.style.top = "0";
    overlay.style.right = "0";
    overlay.style.maxHeight = "100%";
    overlay.style.overflow = "auto";
    overlay.style.width = "360px";
    overlay.style.zIndex = "999999";
    overlay.style.background = "#fff";
    overlay.style.borderLeft = "2px solid #000";
    overlay.style.boxShadow = "-2px 0 5px rgba(0,0,0,.2)";
    overlay.style.font = "14px/1.4 sans-serif";
    overlay.style.padding = "1em";

    const h = document.createElement("h2");
    h.textContent = `WCAG Checker – ${issues.length} issue${
      issues.length !== 1 ? "s" : ""
    }`;
    h.style.marginTop = "0";
    overlay.appendChild(h);

    if (issues.length === 0) {
      const p = document.createElement("p");
      p.textContent = "✅ No issues found.";
      overlay.appendChild(p);
    } else {
      const list = document.createElement("ul");
      list.style.paddingLeft = "1.2em";
      issues.forEach((iss) => {
        const li = document.createElement("li");
        li.textContent = `${iss.type}: ${iss.msg}`;
        li.style.marginBottom = ".5em";
        li.style.cursor = "pointer";
        li.onclick = () => iss.node.scrollIntoView({ behavior: "smooth", block: "center" });
        list.appendChild(li);
      });
      overlay.appendChild(list);
    }

    const closeBtn = document.createElement("button");
    closeBtn.textContent = "Close";
    closeBtn.style.marginTop = "1em";
    closeBtn.onclick = () => overlay.remove();
    overlay.appendChild(closeBtn);

    document.body.appendChild(overlay);
  }

  window.__wcagChecker = { run };
})();
