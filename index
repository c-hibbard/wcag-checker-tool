<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>WCAG 2.2 Accessibility Checker</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #f8f9fa;
      color: #222;
      max-width: 800px;
      margin: 2rem auto;
      padding: 1rem;
    }
    h1 { color: #0077cc; }
    button {
      padding: 0.75rem 1.5rem;
      font-size: 1rem;
      margin-top: 1rem;
      cursor: pointer;
      background-color: #0077cc;
      color: white;
      border: none;
      border-radius: 4px;
    }
    #report {
      margin-top: 2rem;
      white-space: pre-wrap;
      background: #fff;
      padding: 1rem;
      border-radius: 5px;
      border: 1px solid #ccc;
      min-height: 64px;
    }
  </style>
</head>
<body>

  <h1>üß™ WCAG 2.2 Accessibility Checker</h1>
  <p>This simple tool scans the current webpage for common WCAG 2.2 issues:</p>
  <ul>
    <li>Missing <code>alt</code> attributes on images</li>
    <li>Low contrast text</li>
    <li>Unlabeled form inputs</li>
  </ul>

  <button id="runBtn">Run the Checker</button>
  <div id="report">Click ‚ÄúRun the Checker‚Äù to analyze this page.</div>

  <script>
    // ---------- Core checker ----------
    function runChecker() {
      const report = [];
      const reportDiv = document.getElementById('report');
      reportDiv.textContent = 'Running checks...';

      // Check 1: Missing alt attributes
      document.querySelectorAll('img').forEach(img => {
        if (!img.hasAttribute('alt') || img.getAttribute('alt').trim() === '') {
          report.push('‚ùå Missing alt attribute on an image.');
        }
      });

      // Check 2: Low contrast text
      function getLuminance(r, g, b) {
        const a = [r, g, b].map(v => {
          v /= 255;
          return v <= 0.03928 ? v / 12.92 : Math.pow(((v + 0.055) / 1.055), 2.4);
        });
        return 0.2126 * a[0] + 0.7152 * a[1] + 0.0722 * a[2];
      }
      function contrastRatio(fg, bg) {
        return (Math.max(fg, bg) + 0.05) / (Math.min(fg, bg) + 0.05);
      }

      document.querySelectorAll('*').forEach(el => {
        const style = window.getComputedStyle(el);
        const color = style.color;
        const bg = style.backgroundColor;

        if (color && bg && color.startsWith('rgb') && bg.startsWith('rgb')) {
          const fgRGB = color.match(/\d+/g).map(Number);
          const bgRGB = bg.match(/\d+/g).map(Number);
          const ratio = contrastRatio(getLuminance(...fgRGB), getLuminance(...bgRGB));
          if (ratio < 4.5) {
            report.push(`‚ö†Ô∏è Low contrast text (ratio: ${ratio.toFixed(2)}:1).`);
          }
        }
      });

      // Check 3: Missing labels
      document.querySelectorAll('input, textarea, select').forEach(el => {
        const id = el.id;
        if (!id || !document.querySelector(`label[for='${id}']`)) {
          report.push('‚ùå Form input missing associated <label>.');
        }
      });

      // Show report
      reportDiv.textContent = report.length === 0
        ? '‚úÖ No major issues found.'
        : report.join('\n');
    }

    // ---------- Optional: demo injector (referenced by autorun ?demo) ----------
    function insertDemoIssues() {
      const badImg = document.createElement('img');
      badImg.src = 'https://via.placeholder.com/100x60';
      badImg.style.display = 'block';
      badImg.style.marginTop = '16px';
      document.body.appendChild(badImg);

      const lc = document.createElement('div');
      lc.textContent = 'This is low-contrast demo text';
      lc.style.color = 'rgb(190,190,190)';
      lc.style.backgroundColor = 'rgb(255,255,255)';
      lc.style.margin = '12px 0';
      document.body.appendChild(lc);

      const input = document.createElement('input');
      input.type = 'text';
      input.placeholder = 'Unlabeled input';
      input.style.display = 'block';
      document.body.appendChild(input);
    }

    // ---------- Wire up the button ----------
    document.getElementById('runBtn').addEventListener('click', function (e) {
      e.preventDefault();
      runChecker();
    });

    // ---------- Autorun support: ?autorun=1 (& optional ?demo=1) ----------
    (function autorunIfRequested(){
      const q = new URLSearchParams(location.search);
      const shouldDemo = q.has('demo') && q.get('demo') !== '0';
      const shouldAutorun = q.has('autorun') && q.get('autorun') !== '0';
      if (shouldDemo) { try { insertDemoIssues(); } catch(e){} }
      if (shouldAutorun) { setTimeout(runChecker, 50); }
    })();
  </script>
</body>
</html>
